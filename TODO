- which XML properties are supported (see webdav.ml:create_properties)?  which can be modified by a client?
- do we implement the right HTTP error codes?
- caldav collection properties (RFC 4791 Sec 5.2)
- MKCALENDAR HTTP verb (RFC 4791 Sec 5.3)
- REPORT (from CalDAV including XML requests, answers, collation)
- tests (wir haben: icalendar/ics, webdav-xml. was fehlt: webdav/http und caldav/http)
- apple's ist umfangreich - dokumentieren was schon funktioniert und was wir denken, dass funktionieren sollte

- Access control (both WebDAV and CalDAV layers)
- service discovery of calendars
- Persistent storage
- WebUI

DONE:
- client interoperability: thunderbird! calendar.app! create and delete and rename event, todo
- slash normalisation with prefix
- timezone and date normalisation
- finish tests for access control for all verbs
- implement access control for report, and covered by test suite
- access control (WebDAV)
- user management (config file: users, hostname, routing, etc.)
- how to add user and set acl
- unsafe_find and unsafe_add: comment reasons
- test access control with apple and thunderbird
- readonly xml props (sind live properties) - there may still be more (in caldav/acl)
- access control into separate module
- move stuff to webdav_api
- curl command to add a user, delete a user, access control, change password
- curl command to add group, add group members, delete group members, delete group
- add custom salting
- mode for TOFU (everybody can create their user if not already taken)
- ACL/policy configuration via property in root folder
- configure default group membership for newly created users via webdav property
- make a mirage unikernel
- unikernel parameter: http vs https (certificates), root password, file system root / data directory, trust on first use, hostname
- remove hardcoded users
- stored URLs contain scheme, hostname, and port
--> should instead be relative!?
--> or absolute, but not containing scheme, hostname, port
- test and adapt calendar-home-set with multiple entries:
 - does it work with clients? no
 - which path is a "new calendar" created in? unclear
 => man kann alles in ein verzeichnis dumpen, filenames sind uniqe

-- 31st August 2018:

- implement ACL for writing acls, forbid to write acl in PROPPATCH / MKCOL / MKCALENDAR
- a private calendar which should turn into a public one: how to adjust all the event ACLs? maybe DAV:inherited ACL?
- Fs.to_string should return a leading /
- curl commands to make calendar public/private/read-only/protected (freebusy only)
- access control XML content when forbidden
- client interoperability: android! create new todo lists and new calendars, use different users
- research scope of implementing calendar sharing
- internationalisation (unicode)
- report text-match
- icalendar CLASS property: public / private / ...
- sync-collection (WebDAV) ctag
- webUI
- recurence exdate, rdate
- calendar sharing
  - free-busy-query report
  - [locking (WebDAV)]
  - inboxes
- more tests from apple's test suite
- component_in_timerange implementations (todo/freebusy)
- preserve creation-date on write_component if it was already there
- report CalDAV 7.8.6 - 7.8.10
- attachments
- recurrence < daily
- freebusy in timerange / todo in timerange
- automatic discovery of calendar url
- add group calendar, remove group calendar

- persistent storage (irmin/git?) (mirage-fs-unix works for us!)
- http request with query parameter that is empty leads to an empty reply:
 curl -v -X PUT "http://root:toor@127.0.0.1:8080/user?name=user5&password= &foo=bar"

-- 2nd November 2018

- put all calendars into one dir, control access via acl
- make a running calendar server for robur internally
- blackberry comma topic
- LATER: KV updates for irmin/git
