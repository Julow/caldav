7 min 910 Words

Einleitung 1.5 min

Was ist eure Idee

Kalender, selbst-hosting, einfach zu betreiben
Minimaler code fuer einen Service - wir sind das operating system (kein Linux / Windows / etc erforderlich). 
Kein general purpose operating system (unsicher/komplex).
Service = als virtuelle maschine ausgefuehrt.
Schaubild: Herkoemmlicher Kalenderserver vs unsere Architektur - "Library Operqting System"

Warum habt ihr an dem Projekt gearbeitet, was ist eure Vision, was motiviert euch?
Dezentrale alternative zu Google.
Unikernels in der praxis - sehr praxisnaher / angewandter service. Von der Forschung in die reale Welt.
Techniken der sicheren programmierung "from the ground up" - programmiersprache, vermeiden von state

Hauptteil 4 min

Komponenten die wir gebaut haben
- In-Memory-Dateisystem
- Webdav + access control
  * Properties-Datenstruktur (als XML format/anfragen) - Vorhaltesystem zum speichern der Eigenschaften einer Datei, z.B. zugriffsrechte, dateiformat, erstellungsdatum
  * Tree parser-kombinatoren auf XML (bequeme Zugriffsmoeglichkeit auf Daten in einer Baumstruktur).
- Icalendar-Dateiformat (parser und tooling)
- Nutzen Webmachine (Uebergangs-Modell fuer HTTP-Kommunikations-Protokoll, damit man nicht mit HTTP in der "business logic" / application logic umzugehen braucht und die applikation klarer wird.)
  * Erweiterung von Webmachine um DAV-Http-Verben (+ kurze erklaerung / demo?)
- Caldav (iCalendar ueber Webdav, + etwas glue, + implementierung zusaetzlicher verben z.B. MKCALENDAR, REPORT, Abfrage mehrerer events in einem Zeitraum)
Adventure stories: Bugs in Webmachine, RFC fehler, irmin story, tree kombinatoren / XML parser

Flow / beispielhafter Benutzungsablauf
* Screencast
* Erklaerung, dass wir jetzt gerade live testen in Marrakesh

Schluss 1.5 min

Was habt ihr auf dem Weg gelernt

Arbeitstechnische Erkenntnisse 
* Wie war das Pair-Programming?
* Unit testing approach

Alles wird nur mit Wasser gekocht, "oeffnen von black boxes" = alle level, inklusive OS sind von Menschen gemacht und lesbar und muessen keine black box sein.

RFCs haben viele Errata.
Andere server und clients implementieren alles anders als der RFC :D

Rekurrente Kalenderevents sind nicht so einfach, Datumsberechnungen / Zeitzonen sind nicht so einfach.
Realistische Grenzen der implementierung (sekuendlich wiederholung ist selten :D).

Was haettet ihr anders gemacht, Fails and Wins

Hindsight bias: Projekt war zu gross, mussten Teile streichen (in-browser-client, sharing/scheduling-protokolle, interoperation mit google als client).
Kalender-Server funktioniert gut mit Apple Calendar.app (iPhone, iPad, MacOS), Thunderbird Lightning, DavDroid (Android), und FirefoxOS, und wird weiterhin live getestet.
Pair programming und unit testing waren ein win.

Url, Kontakt, Dankeschoen fuer das Funding!
